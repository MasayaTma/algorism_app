# prompts.py

# ----------------------------------------
# 共通のシステムメッセージ
# ----------------------------------------
system_message = {
    "role": "system",
    "content": (
        "あなたはアルゴリズムとデータ構造の専門家です。\n"
        "ユーザーの問題に対し、明確かつ実践的なアプローチを提供し、"
        "ステップごとにわかりやすく解説してください。"
    )
}

def generate_three_methods_prompt(user_problem: str) -> dict:
    content = (
        "以下の「ユーザーの課題」に対して、適切な３つの解決手段を提示してください。\n\n"
        f"【ユーザーの課題】\n"
        f"{user_problem}\n\n"
        "―――――――――――――――\n"
        "＜出力フォーマット＞\n"
        "1. 手法A:ツール名\n"
        "   a) 実装手順\n"
        "   b) 必要なライブラリや機能例\n"
        "   c) メリット\n"
        "   d) デメリット\n\n"
        "2. 手法B: ・・・（同様のフォーマット）\n\n"
        "3. 手法C: ・・・\n\n"
        "※手法A/B/C はそれぞれ異なるツールや実装フローになるようにしてください。\n"
        "各手法の前書きは書かずフォーマットに沿った形での出力をお願いします。"
        )
    return {"role": "user", "content": content}



# ----------------------------------------
# ステップ4用：選択された手法に対する詳細フォローを依頼するプロンプト
# （変更なし）
# ----------------------------------------
def generate_followup_prompt(user_problem: str, selected_method: str) -> dict:
    content = (
        f"以下の情報をもとに、ユーザーが選択した手法をさらに詳細に解説してください。\n\n"
        f"【ユーザーの課題】\n"
        f"{user_problem}\n\n"
        f"【選択された手法】\n"
        f"{selected_method}\n\n"
        "―――――――――――――――\n"
        "この手法を実装する際の具体的な手順や注意点、擬似コードまたは例示的なコードスニペットを示してください。\n"
        "また、よくあるつまずきポイントとその対策も合わせて説明してください。\n"
    )
    return {"role": "user", "content": content}
